// Code generated by oapi-codegen. DO NOT EDIT.
// Package aether provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package aether

import (
	"encoding/json"
	"fmt"

	"github.com/pkg/errors"
)

// Defines values for EnterprisesEnterpriseSitePlansOrigin.
const (
	EnterprisesEnterpriseSitePlansOriginORIGINCENTROID EnterprisesEnterpriseSitePlansOrigin = "ORIGIN_CENTROID"

	EnterprisesEnterpriseSitePlansOriginORIGINTOPLEFT EnterprisesEnterpriseSitePlansOrigin = "ORIGIN_TOP_LEFT"
)

// Optionally specify a target other than the default (only on PATCH method)
type AdditionalPropertyTarget struct {

	// an override of the target (device)
	Target *string `json:"target,omitempty" yaml:"target,omitempty"`
}

// To optionally omit 'required' properties, add them to 'unchanged' list
type AdditionalPropertyUnchanged struct {

	// A comma seperated list of unchanged mandatory attribute names
	Unchanged *string `json:"unchanged,omitempty" yaml:"unchanged,omitempty"`
}

// The connectivity-services top level container
type ConnectivityServices struct {

	// List of connectivity services
	ConnectivityService  *[]ConnectivityServicesConnectivityService `json:"connectivity-service,omitempty" yaml:"connectivity-service,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget        `json:"-" yaml:"-"`
}

// ConnectivityServicesConnectivityService defines model for Connectivity-services_Connectivity-service.
type ConnectivityServicesConnectivityService struct {

	// URL of ACC prometheus
	AccPrometheusUrl *string `json:"acc-prometheus-url,omitempty" yaml:"acc-prometheus-url,omitempty"`

	// ID for this connectivity service.
	ConnectivityServiceId string `json:"connectivity-service-id" yaml:"connectivity-service-id"`

	// url of the 5g core
	Core5gEndpoint *string `json:"core-5g-endpoint,omitempty" yaml:"core-5g-endpoint,omitempty"`

	// long description field
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty" yaml:"display-name,omitempty"`
}

// The top level enterprises container
type Enterprises struct {

	// List of enterprises
	Enterprise           *[]EnterprisesEnterprise            `json:"enterprise,omitempty" yaml:"enterprise,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyTarget `json:"-" yaml:"-"`
}

// EnterprisesEnterprise defines model for Enterprises_Enterprise.
type EnterprisesEnterprise struct {

	// List of applications
	Application *[]EnterprisesEnterpriseApplication `json:"application,omitempty" yaml:"application,omitempty"`

	// The list for connectivity-service
	ConnectivityService *[]EnterprisesEnterpriseConnectivityService `json:"connectivity-service,omitempty" yaml:"connectivity-service,omitempty"`

	// long description field
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty" yaml:"display-name,omitempty"`

	// ID for this enterprise.
	EnterpriseId string  `json:"enterprise-id" yaml:"enterprise-id"`
	Image        *string `json:"image,omitempty" yaml:"image,omitempty"`

	// List of site
	Site *[]EnterprisesEnterpriseSite `json:"site,omitempty" yaml:"site,omitempty"`

	// List of slice templates
	Template *[]EnterprisesEnterpriseTemplate `json:"template,omitempty" yaml:"template,omitempty"`

	// List of traffic class
	TrafficClass *[]EnterprisesEnterpriseTrafficClass `json:"traffic-class,omitempty" yaml:"traffic-class,omitempty"`
}

// EnterprisesEnterpriseApplication defines model for Enterprises_Enterprise_Application.
type EnterprisesEnterpriseApplication struct {

	// Address of this application. Either a hostname, an IP, or a subnet.
	Address string `json:"address" yaml:"address"`

	// ID for this application.
	ApplicationId string `json:"application-id" yaml:"application-id"`

	// long description field
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty" yaml:"display-name,omitempty"`

	// list for endpoint
	Endpoint             *[]EnterprisesEnterpriseApplicationEndpoint `json:"endpoint,omitempty" yaml:"endpoint,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged      `json:"-" yaml:"-"`
}

// EnterprisesEnterpriseApplicationEndpoint defines model for Enterprises_Enterprise_Application_Endpoint.
type EnterprisesEnterpriseApplicationEndpoint struct {

	// long description field
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty" yaml:"display-name,omitempty"`

	// Id of this endpoint
	EndpointId string `json:"endpoint-id" yaml:"endpoint-id"`

	// Maximum bitrate
	Mbr *EnterprisesEnterpriseApplicationEndpointMbr `json:"mbr,omitempty" yaml:"mbr,omitempty"`

	// Last port in range
	PortEnd *int `json:"port-end,omitempty" yaml:"port-end,omitempty"`

	// First port in range
	PortStart *int `json:"port-start,omitempty" yaml:"port-start,omitempty"`

	// Protocol of this endpoint
	Protocol *string `json:"protocol,omitempty" yaml:"protocol,omitempty"`

	// Link to traffic class
	TrafficClass *string `json:"traffic-class,omitempty" yaml:"traffic-class,omitempty"`
}

// Maximum bitrate
type EnterprisesEnterpriseApplicationEndpointMbr struct {

	// Per-Device per application MBR downlink data rate in bps
	Downlink *int64 `json:"downlink,omitempty" yaml:"downlink,omitempty"`

	// Per-Device per-Application MBR uplink data rate in bps
	Uplink *int64 `json:"uplink,omitempty" yaml:"uplink,omitempty"`
}

// EnterprisesEnterpriseConnectivityService defines model for Enterprises_Enterprise_Connectivity-service.
type EnterprisesEnterpriseConnectivityService struct {

	// Link to connectivity services where configuration should be pushed for this enterprise's devices
	ConnectivityService string `json:"connectivity-service" yaml:"connectivity-service"`

	// Allow or disallow pushes to this connectivity service
	Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty"`
}

// EnterprisesEnterpriseSite defines model for Enterprises_Enterprise_Site.
type EnterprisesEnterpriseSite struct {

	// long description field
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// List of devices
	Device *[]EnterprisesEnterpriseSiteDevice `json:"device,omitempty" yaml:"device,omitempty"`

	// List of device groups
	DeviceGroup *[]EnterprisesEnterpriseSiteDeviceGroup `json:"device-group,omitempty" yaml:"device-group,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty" yaml:"display-name,omitempty"`
	Image       *string `json:"image,omitempty" yaml:"image,omitempty"`

	// container for imsi-defination
	ImsiDefinition *EnterprisesEnterpriseSiteImsiDefinition `json:"imsi-definition,omitempty" yaml:"imsi-definition,omitempty"`

	// List of ip domains
	IpDomain *[]EnterprisesEnterpriseSiteIpDomain `json:"ip-domain,omitempty" yaml:"ip-domain,omitempty"`

	// container for monitoring
	Monitoring *EnterprisesEnterpriseSiteMonitoring `json:"monitoring,omitempty" yaml:"monitoring,omitempty"`

	// List of sim cards
	SimCard *[]EnterprisesEnterpriseSiteSimCard `json:"sim-card,omitempty" yaml:"sim-card,omitempty"`

	// ID for this site.
	SiteId string `json:"site-id" yaml:"site-id"`

	// container for site-plans
	SitePlans *EnterprisesEnterpriseSitePlans `json:"site-plans,omitempty" yaml:"site-plans,omitempty"`

	// List of Slices
	Slice *[]EnterprisesEnterpriseSiteSlice `json:"slice,omitempty" yaml:"slice,omitempty"`

	// List of small cell addresses
	SmallCell *[]EnterprisesEnterpriseSiteSmallCell `json:"small-cell,omitempty" yaml:"small-cell,omitempty"`

	// A list of named upfs.
	Upf *[]EnterprisesEnterpriseSiteUpf `json:"upf,omitempty" yaml:"upf,omitempty"`
}

// EnterprisesEnterpriseSiteDevice defines model for Enterprises_Enterprise_Site_Device.
type EnterprisesEnterpriseSiteDevice struct {

	// long description field
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// ID for this device.
	DeviceId string `json:"device-id" yaml:"device-id"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty" yaml:"display-name,omitempty"`

	// IMEI for this device
	Imei     *int64    `json:"imei,omitempty" yaml:"imei,omitempty"`
	Position *Position `json:"position,omitempty" yaml:"position,omitempty"`

	// Link to simcard
	SimCard *string `json:"sim-card,omitempty" yaml:"sim-card,omitempty"`

	// type of device
	Type *string `json:"type,omitempty" yaml:"type,omitempty"`
}

// EnterprisesEnterpriseSiteDeviceGroup defines model for Enterprises_Enterprise_Site_Device-group.
type EnterprisesEnterpriseSiteDeviceGroup struct {

	// long description field
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// list of devices in this device-group
	Device *[]EnterprisesEnterpriseSiteDeviceGroupDevice `json:"device,omitempty" yaml:"device,omitempty"`

	// ID for this device group.
	DeviceGroupId string `json:"device-group-id" yaml:"device-group-id"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty" yaml:"display-name,omitempty"`

	// Link to ip-domain settings that determine the pool of IP addresses,
	// as well as the domain resolver settings to use
	IpDomain *string `json:"ip-domain,omitempty" yaml:"ip-domain,omitempty"`

	// Maximum bitrate
	Mbr *EnterprisesEnterpriseSiteDeviceGroupMbr `json:"mbr,omitempty" yaml:"mbr,omitempty"`

	// Link to traffic class
	TrafficClass string `json:"traffic-class" yaml:"traffic-class"`

	// type of device-group
	Type                 *string                                `json:"type,omitempty" yaml:"type,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-" yaml:"-"`
}

// EnterprisesEnterpriseSiteDeviceGroupDevice defines model for Enterprises_Enterprise_Site_Device-group_Device.
type EnterprisesEnterpriseSiteDeviceGroupDevice struct {

	// Link to device
	DeviceId string `json:"device-id" yaml:"device-id"`

	// Enable this device
	Enable *bool `json:"enable,omitempty" yaml:"enable,omitempty"`
}

// Maximum bitrate
type EnterprisesEnterpriseSiteDeviceGroupMbr struct {

	// Per-device MBR downlink data rate in bps
	Downlink int64 `json:"downlink" yaml:"downlink"`

	// Per-device MBR uplink data rate in bps
	Uplink               int64                                  `json:"uplink" yaml:"uplink"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-" yaml:"-"`
}

// container for imsi-defination
type EnterprisesEnterpriseSiteImsiDefinition struct {

	// enterprise-specific identifier
	Enterprise int32 `json:"enterprise" yaml:"enterprise"`

	// IMSI format specifier, describes how fields are packed into an IMSI. Must be exactly 15 characters long. For example, CCCNNNEEESSSSSS.
	Format string `json:"format" yaml:"format"`

	// mobile country code
	Mcc string `json:"mcc" yaml:"mcc"`

	// mobile network code
	Mnc                  string                                 `json:"mnc" yaml:"mnc"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-" yaml:"-"`
}

// EnterprisesEnterpriseSiteIpDomain defines model for Enterprises_Enterprise_Site_Ip-domain.
type EnterprisesEnterpriseSiteIpDomain struct {

	// administrative status
	AdminStatus *string `json:"admin-status,omitempty" yaml:"admin-status,omitempty"`

	// long description field
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty" yaml:"display-name,omitempty"`

	// DNN/APN
	Dnn string `json:"dnn" yaml:"dnn"`

	// primary dns server name
	DnsPrimary *string `json:"dns-primary,omitempty" yaml:"dns-primary,omitempty"`

	// secondary dns server name
	DnsSecondary *string `json:"dns-secondary,omitempty" yaml:"dns-secondary,omitempty"`

	// ID for this ip domain.
	IpDomainId string `json:"ip-domain-id" yaml:"ip-domain-id"`

	// maximum transmission unit
	Mtu *int `json:"mtu,omitempty" yaml:"mtu,omitempty"`

	// subnet to allocate ip addresses from
	Subnet               string                                 `json:"subnet" yaml:"subnet"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-" yaml:"-"`
}

// container for monitoring
type EnterprisesEnterpriseSiteMonitoring struct {

	// URL of edge cluster prometheus
	EdgeClusterPrometheusUrl *string `json:"edge-cluster-prometheus-url,omitempty" yaml:"edge-cluster-prometheus-url,omitempty"`

	// List of edge monitoring devices
	EdgeDevice *[]EnterprisesEnterpriseSiteMonitoringEdgeDevice `json:"edge-device,omitempty" yaml:"edge-device,omitempty"`

	// URL of monitoring prometheus
	EdgeMonitoringPrometheusUrl *string `json:"edge-monitoring-prometheus-url,omitempty" yaml:"edge-monitoring-prometheus-url,omitempty"`
}

// EnterprisesEnterpriseSiteMonitoringEdgeDevice defines model for Enterprises_Enterprise_Site_Monitoring_Edge-device.
type EnterprisesEnterpriseSiteMonitoringEdgeDevice struct {

	// long description field
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty" yaml:"display-name,omitempty"`

	// Id of edge monitoring device
	EdgeDeviceId string `json:"edge-device-id" yaml:"edge-device-id"`
}

// EnterprisesEnterpriseSitePlan defines model for Enterprises_Enterprise_Site_Plan.
type EnterprisesEnterpriseSitePlan struct {

	// The site plan identifier
	Id string `json:"id" yaml:"id"`

	// some sites will have multiple buildings and multiple floors The X and Y offset will allow plans to be shown alongside each other. The Z Offset will allow plans to be stacked over each other in an isometric view
	Offsets *struct {

		// the x offset from the site origin
		XOffset uint32 `json:"x-offset" yaml:"x-offset"`

		// the y offset from the site origin
		YOffset uint32 `json:"y-offset" yaml:"y-offset"`

		// the z offset from the site origin
		ZOffset uint32 `json:"z-offset" yaml:"z-offset"`
	} `json:"offsets,omitempty" yaml:"offsets,omitempty"`
	SvgFile string `json:"svg-file" yaml:"svg-file"`
}

// Each SitePlan will be expected to have layers corresponding to the 'layer-id's given here. The 'display-name' will be the tag given on the UI. Examples of common layers are 'Walls','Text'
type EnterprisesEnterpriseSitePlanLayer struct {
	DisplayName *string `json:"display-name,omitempty" yaml:"display-name,omitempty"`
	LayerId     string  `json:"layer-id" yaml:"layer-id"`
}

// container for site-plans
type EnterprisesEnterpriseSitePlans struct {
	Isometric    *bool                                 `json:"isometric,omitempty" yaml:"isometric,omitempty"`
	Layers       *[]EnterprisesEnterpriseSitePlanLayer `json:"layers,omitempty" yaml:"layers,omitempty"`
	Origin       *EnterprisesEnterpriseSitePlansOrigin `json:"origin,omitempty" yaml:"origin,omitempty"`
	SitePlanList *[]EnterprisesEnterpriseSitePlan      `json:"site-plan-list,omitempty" yaml:"site-plan-list,omitempty"`
}

// EnterprisesEnterpriseSitePlansOrigin defines model for EnterprisesEnterpriseSitePlans.Origin.
type EnterprisesEnterpriseSitePlansOrigin string

// EnterprisesEnterpriseSiteSimCard defines model for Enterprises_Enterprise_Site_Sim-card.
type EnterprisesEnterpriseSiteSimCard struct {

	// long description field
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty" yaml:"display-name,omitempty"`

	// ICCID for this sim card
	Iccid *int64 `json:"iccid,omitempty" yaml:"iccid,omitempty"`

	// IMSI for this sim card
	Imsi *int64 `json:"imsi,omitempty" yaml:"imsi,omitempty"`

	// ID for this sim card.
	SimId string `json:"sim-id" yaml:"sim-id"`
}

// EnterprisesEnterpriseSiteSlice defines model for Enterprises_Enterprise_Site_Slice.
type EnterprisesEnterpriseSiteSlice struct {

	// Default behavior if no filter rules match
	DefaultBehavior string `json:"default-behavior" yaml:"default-behavior"`

	// long description field
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// A list of device groups. Groups will only participate in
	// the Slice if the enable field is set to True
	DeviceGroup *[]EnterprisesEnterpriseSiteSliceDeviceGroup `json:"device-group,omitempty" yaml:"device-group,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty" yaml:"display-name,omitempty"`

	// A list of applications to allow and/or deny. Rules are executed in
	// priority order. The first rule to match will determine the fate
	// of the packet.
	Filter *[]EnterprisesEnterpriseSiteSliceFilter `json:"filter,omitempty" yaml:"filter,omitempty"`

	// Per slice Maximum Bit Rate
	Mbr *EnterprisesEnterpriseSiteSliceMbr `json:"mbr,omitempty" yaml:"mbr,omitempty"`

	// List of priority traffic rules
	PriorityTrafficRule *[]EnterprisesEnterpriseSiteSlicePriorityTrafficRule `json:"priority-traffic-rule,omitempty" yaml:"priority-traffic-rule,omitempty"`

	// Slice differentiator. Immutable.
	Sd int32 `json:"sd" yaml:"sd"`

	// ID for this slice.
	SliceId string `json:"slice-id" yaml:"slice-id"`

	// Slice/Service type. Immutable.
	Sst int `json:"sst" yaml:"sst"`

	// Link to user plane that implements this vcf
	Upf                  *string                                `json:"upf,omitempty" yaml:"upf,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-" yaml:"-"`
}

// EnterprisesEnterpriseSiteSliceDeviceGroup defines model for Enterprises_Enterprise_Site_Slice_Device-group.
type EnterprisesEnterpriseSiteSliceDeviceGroup struct {

	// Link to device group
	DeviceGroup string `json:"device-group" yaml:"device-group"`

	// Enable this device group
	Enable *bool `json:"enable,omitempty" yaml:"enable,omitempty"`
}

// EnterprisesEnterpriseSiteSliceFilter defines model for Enterprises_Enterprise_Site_Slice_Filter.
type EnterprisesEnterpriseSiteSliceFilter struct {

	// Allow or deny this application
	Allow *bool `json:"allow,omitempty" yaml:"allow,omitempty"`

	// Link to application
	Application string `json:"application" yaml:"application"`

	// Priority of this application
	Priority *int `json:"priority,omitempty" yaml:"priority,omitempty"`
}

// Per slice Maximum Bit Rate
type EnterprisesEnterpriseSiteSliceMbr struct {

	// Per-Slice MBR downlink data rate in bps
	Downlink *int64 `json:"downlink,omitempty" yaml:"downlink,omitempty"`

	// Per-Slice Downlink burst size
	DownlinkBurstSize *int32 `json:"downlink-burst-size,omitempty" yaml:"downlink-burst-size,omitempty"`

	// Per-Slice MBR uplink data rate in bps
	Uplink *int64 `json:"uplink,omitempty" yaml:"uplink,omitempty"`

	// Per-Slice Uplink burst size
	UplinkBurstSize *int32 `json:"uplink-burst-size,omitempty" yaml:"uplink-burst-size,omitempty"`
}

// EnterprisesEnterpriseSiteSlicePriorityTrafficRule defines model for Enterprises_Enterprise_Site_Slice_Priority-traffic-rule.
type EnterprisesEnterpriseSiteSlicePriorityTrafficRule struct {

	// Link to application
	Application string `json:"application" yaml:"application"`

	// long description field
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// Link to device
	Device string `json:"device" yaml:"device"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty" yaml:"display-name,omitempty"`

	// Link to endpoint in application
	Endpoint string `json:"endpoint" yaml:"endpoint"`

	// For choice bitrate:gbr-case
	Gbr *EnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr `json:"gbr,omitempty" yaml:"gbr,omitempty"`

	// For choice bitrate:mbr-case
	Mbr *EnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr `json:"mbr,omitempty" yaml:"mbr,omitempty"`

	// ID for this priority traffic class.
	PriorityTrafficRuleId string `json:"priority-traffic-rule-id" yaml:"priority-traffic-rule-id"`

	// Link to traffic class
	TrafficClass         *string                                `json:"traffic-class,omitempty" yaml:"traffic-class,omitempty"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-" yaml:"-"`
}

// For choice bitrate:gbr-case
type EnterprisesEnterpriseSiteSlicePriorityTrafficRuleGbr struct {

	// Per-Device per application downlink data rate in bps
	Downlink *int64 `json:"downlink,omitempty" yaml:"downlink,omitempty"`

	// Per-Device per-Application uplink data rate in bps
	Uplink *int64 `json:"uplink,omitempty" yaml:"uplink,omitempty"`
}

// For choice bitrate:mbr-case
type EnterprisesEnterpriseSiteSlicePriorityTrafficRuleMbr struct {

	// Per-Device per application downlink data rate in bps
	Downlink *int64 `json:"downlink,omitempty" yaml:"downlink,omitempty"`

	// Per-Device per-Application uplink data rate in bps
	Uplink *int64 `json:"uplink,omitempty" yaml:"uplink,omitempty"`
}

// EnterprisesEnterpriseSiteSmallCell defines model for Enterprises_Enterprise_Site_Small-cell.
type EnterprisesEnterpriseSiteSmallCell struct {

	// Address of small cell
	Address *string `json:"address,omitempty" yaml:"address,omitempty"`

	// long description field
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty" yaml:"display-name,omitempty"`

	// Enable this small cell
	Enable   *bool     `json:"enable,omitempty" yaml:"enable,omitempty"`
	Position *Position `json:"position,omitempty" yaml:"position,omitempty"`

	// Id of small cell
	SmallCellId string `json:"small-cell-id" yaml:"small-cell-id"`

	// Type Allocation Code
	Tac                  string                                 `json:"tac" yaml:"tac"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-" yaml:"-"`
}

// EnterprisesEnterpriseSiteUpf defines model for Enterprises_Enterprise_Site_Upf.
type EnterprisesEnterpriseSiteUpf struct {

	// Address of UPF
	Address string `json:"address" yaml:"address"`

	// url for configuring the UPF
	ConfigEndpoint *string `json:"config-endpoint,omitempty" yaml:"config-endpoint,omitempty"`

	// long description field
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty" yaml:"display-name,omitempty"`

	// Port for UPF
	Port int `json:"port" yaml:"port"`

	// ID for this upf.
	UpfId                string                                 `json:"upf-id" yaml:"upf-id"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-" yaml:"-"`
}

// EnterprisesEnterpriseTemplate defines model for Enterprises_Enterprise_Template.
type EnterprisesEnterpriseTemplate struct {

	// Default behavior if no filter rules match
	DefaultBehavior string `json:"default-behavior" yaml:"default-behavior"`

	// long description field
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty" yaml:"display-name,omitempty"`

	// Per-Slice QOS Settings Maximum Bit Rate
	Mbr *EnterprisesEnterpriseTemplateMbr `json:"mbr,omitempty" yaml:"mbr,omitempty"`

	// Slice differentiator
	Sd *int32 `json:"sd,omitempty" yaml:"sd,omitempty"`

	// Slice/Service type
	Sst *int `json:"sst,omitempty" yaml:"sst,omitempty"`

	// ID for this slice template.
	TemplateId           string                                 `json:"template-id" yaml:"template-id"`
	AdditionalProperties map[string]AdditionalPropertyUnchanged `json:"-" yaml:"-"`
}

// Per-Slice QOS Settings Maximum Bit Rate
type EnterprisesEnterpriseTemplateMbr struct {

	// Per-Slice MBR downlink data rate in bps
	Downlink *int64 `json:"downlink,omitempty" yaml:"downlink,omitempty"`

	// Per-Slice Downlink burst size
	DownlinkBurstSize *int32 `json:"downlink-burst-size,omitempty" yaml:"downlink-burst-size,omitempty"`

	// Per-Slice MBR uplink data rate in bps
	Uplink *int64 `json:"uplink,omitempty" yaml:"uplink,omitempty"`

	// Per-Slice Uplink burst size
	UplinkBurstSize *int32 `json:"uplink-burst-size,omitempty" yaml:"uplink-burst-size,omitempty"`
}

// EnterprisesEnterpriseTrafficClass defines model for Enterprises_Enterprise_Traffic-class.
type EnterprisesEnterpriseTrafficClass struct {

	// Allocation and Retention Priority. 1 is the highest. 15 is the lowest.
	Arp *int `json:"arp,omitempty" yaml:"arp,omitempty"`

	// long description field
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// display name to use in GUI or CLI
	DisplayName *string `json:"display-name,omitempty" yaml:"display-name,omitempty"`

	// PDB
	Pdb *int `json:"pdb,omitempty" yaml:"pdb,omitempty"`

	// PELR exponent
	Pelr *int `json:"pelr,omitempty" yaml:"pelr,omitempty"`

	// QOS Class Identifier
	Qci *int `json:"qci,omitempty" yaml:"qci,omitempty"`

	// ID for this traffic class.
	TrafficClassId string `json:"traffic-class-id" yaml:"traffic-class-id"`
}

// Position defines model for Position.
type Position struct {
	DisplayName *string `json:"display-name,omitempty" yaml:"display-name,omitempty"`
	PositionX   int     `json:"position-x" yaml:"position-x"`
	PositionY   int     `json:"position-y" yaml:"position-y"`
	SitePlan    string  `json:"site-plan" yaml:"site-plan"`
}

// target (device in onos-config)
type Target string

// The connectivity-services top level container
type RequestBodyConnectivityServices ConnectivityServices

// RequestBodyConnectivityServicesConnectivityService defines model for RequestBody_Connectivity-services_Connectivity-service.
type RequestBodyConnectivityServicesConnectivityService ConnectivityServicesConnectivityService

// The top level enterprises container
type RequestBodyEnterprises Enterprises

// RequestBodyEnterprisesEnterprise defines model for RequestBody_Enterprises_Enterprise.
type RequestBodyEnterprisesEnterprise EnterprisesEnterprise

// RequestBodyEnterprisesEnterpriseApplication defines model for RequestBody_Enterprises_Enterprise_Application.
type RequestBodyEnterprisesEnterpriseApplication EnterprisesEnterpriseApplication

// RequestBodyEnterprisesEnterpriseApplicationEndpoint defines model for RequestBody_Enterprises_Enterprise_Application_Endpoint.
type RequestBodyEnterprisesEnterpriseApplicationEndpoint EnterprisesEnterpriseApplicationEndpoint

// Maximum bitrate
type RequestBodyEnterprisesEnterpriseApplicationEndpointMbr EnterprisesEnterpriseApplicationEndpointMbr

// RequestBodyEnterprisesEnterpriseConnectivityService defines model for RequestBody_Enterprises_Enterprise_Connectivity-service.
type RequestBodyEnterprisesEnterpriseConnectivityService EnterprisesEnterpriseConnectivityService

// RequestBodyEnterprisesEnterpriseSite defines model for RequestBody_Enterprises_Enterprise_Site.
type RequestBodyEnterprisesEnterpriseSite EnterprisesEnterpriseSite

// RequestBodyEnterprisesEnterpriseSiteDevice defines model for RequestBody_Enterprises_Enterprise_Site_Device.
type RequestBodyEnterprisesEnterpriseSiteDevice EnterprisesEnterpriseSiteDevice

// RequestBodyEnterprisesEnterpriseSiteDeviceGroup defines model for RequestBody_Enterprises_Enterprise_Site_Device-group.
type RequestBodyEnterprisesEnterpriseSiteDeviceGroup EnterprisesEnterpriseSiteDeviceGroup

// RequestBodyEnterprisesEnterpriseSiteDeviceGroupDevice defines model for RequestBody_Enterprises_Enterprise_Site_Device-group_Device.
type RequestBodyEnterprisesEnterpriseSiteDeviceGroupDevice EnterprisesEnterpriseSiteDeviceGroupDevice

// Maximum bitrate
type RequestBodyEnterprisesEnterpriseSiteDeviceGroupMbr EnterprisesEnterpriseSiteDeviceGroupMbr

// container for imsi-defination
type RequestBodyEnterprisesEnterpriseSiteImsiDefinition EnterprisesEnterpriseSiteImsiDefinition

// RequestBodyEnterprisesEnterpriseSiteIpDomain defines model for RequestBody_Enterprises_Enterprise_Site_Ip-domain.
type RequestBodyEnterprisesEnterpriseSiteIpDomain EnterprisesEnterpriseSiteIpDomain

// container for monitoring
type RequestBodyEnterprisesEnterpriseSiteMonitoring EnterprisesEnterpriseSiteMonitoring

// RequestBodyEnterprisesEnterpriseSiteMonitoringEdgeDevice defines model for RequestBody_Enterprises_Enterprise_Site_Monitoring_Edge-device.
type RequestBodyEnterprisesEnterpriseSiteMonitoringEdgeDevice EnterprisesEnterpriseSiteMonitoringEdgeDevice

// RequestBodyEnterprisesEnterpriseSiteSimCard defines model for RequestBody_Enterprises_Enterprise_Site_Sim-card.
type RequestBodyEnterprisesEnterpriseSiteSimCard EnterprisesEnterpriseSiteSimCard

// RequestBodyEnterprisesEnterpriseSiteSlice defines model for RequestBody_Enterprises_Enterprise_Site_Slice.
type RequestBodyEnterprisesEnterpriseSiteSlice EnterprisesEnterpriseSiteSlice

// RequestBodyEnterprisesEnterpriseSiteSliceDeviceGroup defines model for RequestBody_Enterprises_Enterprise_Site_Slice_Device-group.
type RequestBodyEnterprisesEnterpriseSiteSliceDeviceGroup EnterprisesEnterpriseSiteSliceDeviceGroup

// RequestBodyEnterprisesEnterpriseSiteSliceFilter defines model for RequestBody_Enterprises_Enterprise_Site_Slice_Filter.
type RequestBodyEnterprisesEnterpriseSiteSliceFilter EnterprisesEnterpriseSiteSliceFilter

// Per slice Maximum Bit Rate
type RequestBodyEnterprisesEnterpriseSiteSliceMbr EnterprisesEnterpriseSiteSliceMbr

// RequestBodyEnterprisesEnterpriseSiteSlicePriorityTrafficRule defines model for RequestBody_Enterprises_Enterprise_Site_Slice_Priority-traffic-rule.
type RequestBodyEnterprisesEnterpriseSiteSlicePriorityTrafficRule EnterprisesEnterpriseSiteSlicePriorityTrafficRule

// RequestBodyEnterprisesEnterpriseSiteSmallCell defines model for RequestBody_Enterprises_Enterprise_Site_Small-cell.
type RequestBodyEnterprisesEnterpriseSiteSmallCell EnterprisesEnterpriseSiteSmallCell

// RequestBodyEnterprisesEnterpriseSiteUpf defines model for RequestBody_Enterprises_Enterprise_Site_Upf.
type RequestBodyEnterprisesEnterpriseSiteUpf EnterprisesEnterpriseSiteUpf

// RequestBodyEnterprisesEnterpriseTemplate defines model for RequestBody_Enterprises_Enterprise_Template.
type RequestBodyEnterprisesEnterpriseTemplate EnterprisesEnterpriseTemplate

// Per-Slice QOS Settings Maximum Bit Rate
type RequestBodyEnterprisesEnterpriseTemplateMbr EnterprisesEnterpriseTemplateMbr

// RequestBodyEnterprisesEnterpriseTrafficClass defines model for RequestBody_Enterprises_Enterprise_Traffic-class.
type RequestBodyEnterprisesEnterpriseTrafficClass EnterprisesEnterpriseTrafficClass

// PostConnectivityServicesJSONRequestBody defines body for PostConnectivityServices for application/json ContentType.
type PostConnectivityServicesJSONRequestBody RequestBodyConnectivityServices

// PostConnectivityServicesConnectivityServiceJSONRequestBody defines body for PostConnectivityServicesConnectivityService for application/json ContentType.
type PostConnectivityServicesConnectivityServiceJSONRequestBody RequestBodyConnectivityServicesConnectivityService

// PostEnterprisesJSONRequestBody defines body for PostEnterprises for application/json ContentType.
type PostEnterprisesJSONRequestBody RequestBodyEnterprises

// PostEnterprisesEnterpriseJSONRequestBody defines body for PostEnterprisesEnterprise for application/json ContentType.
type PostEnterprisesEnterpriseJSONRequestBody RequestBodyEnterprisesEnterprise

// PostEnterprisesEnterpriseApplicationJSONRequestBody defines body for PostEnterprisesEnterpriseApplication for application/json ContentType.
type PostEnterprisesEnterpriseApplicationJSONRequestBody RequestBodyEnterprisesEnterpriseApplication

// PostEnterprisesEnterpriseApplicationEndpointJSONRequestBody defines body for PostEnterprisesEnterpriseApplicationEndpoint for application/json ContentType.
type PostEnterprisesEnterpriseApplicationEndpointJSONRequestBody RequestBodyEnterprisesEnterpriseApplicationEndpoint

// PostEnterprisesEnterpriseApplicationEndpointMbrJSONRequestBody defines body for PostEnterprisesEnterpriseApplicationEndpointMbr for application/json ContentType.
type PostEnterprisesEnterpriseApplicationEndpointMbrJSONRequestBody RequestBodyEnterprisesEnterpriseApplicationEndpointMbr

// PostEnterprisesEnterpriseConnectivityServiceJSONRequestBody defines body for PostEnterprisesEnterpriseConnectivityService for application/json ContentType.
type PostEnterprisesEnterpriseConnectivityServiceJSONRequestBody RequestBodyEnterprisesEnterpriseConnectivityService

// PostEnterprisesEnterpriseSiteJSONRequestBody defines body for PostEnterprisesEnterpriseSite for application/json ContentType.
type PostEnterprisesEnterpriseSiteJSONRequestBody RequestBodyEnterprisesEnterpriseSite

// PostEnterprisesEnterpriseSiteDeviceGroupJSONRequestBody defines body for PostEnterprisesEnterpriseSiteDeviceGroup for application/json ContentType.
type PostEnterprisesEnterpriseSiteDeviceGroupJSONRequestBody RequestBodyEnterprisesEnterpriseSiteDeviceGroup

// PostEnterprisesEnterpriseSiteDeviceGroupDeviceJSONRequestBody defines body for PostEnterprisesEnterpriseSiteDeviceGroupDevice for application/json ContentType.
type PostEnterprisesEnterpriseSiteDeviceGroupDeviceJSONRequestBody RequestBodyEnterprisesEnterpriseSiteDeviceGroupDevice

// PostEnterprisesEnterpriseSiteDeviceGroupMbrJSONRequestBody defines body for PostEnterprisesEnterpriseSiteDeviceGroupMbr for application/json ContentType.
type PostEnterprisesEnterpriseSiteDeviceGroupMbrJSONRequestBody RequestBodyEnterprisesEnterpriseSiteDeviceGroupMbr

// PostEnterprisesEnterpriseSiteDeviceJSONRequestBody defines body for PostEnterprisesEnterpriseSiteDevice for application/json ContentType.
type PostEnterprisesEnterpriseSiteDeviceJSONRequestBody RequestBodyEnterprisesEnterpriseSiteDevice

// PostEnterprisesEnterpriseSiteImsiDefinitionJSONRequestBody defines body for PostEnterprisesEnterpriseSiteImsiDefinition for application/json ContentType.
type PostEnterprisesEnterpriseSiteImsiDefinitionJSONRequestBody RequestBodyEnterprisesEnterpriseSiteImsiDefinition

// PostEnterprisesEnterpriseSiteIpDomainJSONRequestBody defines body for PostEnterprisesEnterpriseSiteIpDomain for application/json ContentType.
type PostEnterprisesEnterpriseSiteIpDomainJSONRequestBody RequestBodyEnterprisesEnterpriseSiteIpDomain

// PostEnterprisesEnterpriseSiteMonitoringJSONRequestBody defines body for PostEnterprisesEnterpriseSiteMonitoring for application/json ContentType.
type PostEnterprisesEnterpriseSiteMonitoringJSONRequestBody RequestBodyEnterprisesEnterpriseSiteMonitoring

// PostEnterprisesEnterpriseSiteMonitoringEdgeDeviceJSONRequestBody defines body for PostEnterprisesEnterpriseSiteMonitoringEdgeDevice for application/json ContentType.
type PostEnterprisesEnterpriseSiteMonitoringEdgeDeviceJSONRequestBody RequestBodyEnterprisesEnterpriseSiteMonitoringEdgeDevice

// PostEnterprisesEnterpriseSiteSimCardJSONRequestBody defines body for PostEnterprisesEnterpriseSiteSimCard for application/json ContentType.
type PostEnterprisesEnterpriseSiteSimCardJSONRequestBody RequestBodyEnterprisesEnterpriseSiteSimCard

// PostEnterprisesEnterpriseSiteSliceJSONRequestBody defines body for PostEnterprisesEnterpriseSiteSlice for application/json ContentType.
type PostEnterprisesEnterpriseSiteSliceJSONRequestBody RequestBodyEnterprisesEnterpriseSiteSlice

// PostEnterprisesEnterpriseSiteSliceDeviceGroupJSONRequestBody defines body for PostEnterprisesEnterpriseSiteSliceDeviceGroup for application/json ContentType.
type PostEnterprisesEnterpriseSiteSliceDeviceGroupJSONRequestBody RequestBodyEnterprisesEnterpriseSiteSliceDeviceGroup

// PostEnterprisesEnterpriseSiteSliceFilterJSONRequestBody defines body for PostEnterprisesEnterpriseSiteSliceFilter for application/json ContentType.
type PostEnterprisesEnterpriseSiteSliceFilterJSONRequestBody RequestBodyEnterprisesEnterpriseSiteSliceFilter

// PostEnterprisesEnterpriseSiteSliceMbrJSONRequestBody defines body for PostEnterprisesEnterpriseSiteSliceMbr for application/json ContentType.
type PostEnterprisesEnterpriseSiteSliceMbrJSONRequestBody RequestBodyEnterprisesEnterpriseSiteSliceMbr

// PostEnterprisesEnterpriseSiteSlicePriorityTrafficRuleJSONRequestBody defines body for PostEnterprisesEnterpriseSiteSlicePriorityTrafficRule for application/json ContentType.
type PostEnterprisesEnterpriseSiteSlicePriorityTrafficRuleJSONRequestBody RequestBodyEnterprisesEnterpriseSiteSlicePriorityTrafficRule

// PostEnterprisesEnterpriseSiteSmallCellJSONRequestBody defines body for PostEnterprisesEnterpriseSiteSmallCell for application/json ContentType.
type PostEnterprisesEnterpriseSiteSmallCellJSONRequestBody RequestBodyEnterprisesEnterpriseSiteSmallCell

// PostEnterprisesEnterpriseSiteUpfJSONRequestBody defines body for PostEnterprisesEnterpriseSiteUpf for application/json ContentType.
type PostEnterprisesEnterpriseSiteUpfJSONRequestBody RequestBodyEnterprisesEnterpriseSiteUpf

// PostEnterprisesEnterpriseTemplateJSONRequestBody defines body for PostEnterprisesEnterpriseTemplate for application/json ContentType.
type PostEnterprisesEnterpriseTemplateJSONRequestBody RequestBodyEnterprisesEnterpriseTemplate

// PostEnterprisesEnterpriseTemplateMbrJSONRequestBody defines body for PostEnterprisesEnterpriseTemplateMbr for application/json ContentType.
type PostEnterprisesEnterpriseTemplateMbrJSONRequestBody RequestBodyEnterprisesEnterpriseTemplateMbr

// PostEnterprisesEnterpriseTrafficClassJSONRequestBody defines body for PostEnterprisesEnterpriseTrafficClass for application/json ContentType.
type PostEnterprisesEnterpriseTrafficClassJSONRequestBody RequestBodyEnterprisesEnterpriseTrafficClass

// Getter for additional properties for ConnectivityServices. Returns the specified
// element and whether it was found
func (a ConnectivityServices) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ConnectivityServices
func (a *ConnectivityServices) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ConnectivityServices to handle AdditionalProperties
func (a *ConnectivityServices) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["connectivity-service"]; found {
		err = json.Unmarshal(raw, &a.ConnectivityService)
		if err != nil {
			return errors.Wrap(err, "error reading 'connectivity-service'")
		}
		delete(object, "connectivity-service")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ConnectivityServices to handle AdditionalProperties
func (a ConnectivityServices) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ConnectivityService != nil {
		object["connectivity-service"], err = json.Marshal(a.ConnectivityService)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'connectivity-service'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Enterprises. Returns the specified
// element and whether it was found
func (a Enterprises) Get(fieldName string) (value AdditionalPropertyTarget, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Enterprises
func (a *Enterprises) Set(fieldName string, value AdditionalPropertyTarget) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Enterprises to handle AdditionalProperties
func (a *Enterprises) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["enterprise"]; found {
		err = json.Unmarshal(raw, &a.Enterprise)
		if err != nil {
			return errors.Wrap(err, "error reading 'enterprise'")
		}
		delete(object, "enterprise")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyTarget)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyTarget
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Enterprises to handle AdditionalProperties
func (a Enterprises) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Enterprise != nil {
		object["enterprise"], err = json.Marshal(a.Enterprise)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'enterprise'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EnterprisesEnterpriseApplication. Returns the specified
// element and whether it was found
func (a EnterprisesEnterpriseApplication) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EnterprisesEnterpriseApplication
func (a *EnterprisesEnterpriseApplication) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EnterprisesEnterpriseApplication to handle AdditionalProperties
func (a *EnterprisesEnterpriseApplication) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["address"]; found {
		err = json.Unmarshal(raw, &a.Address)
		if err != nil {
			return errors.Wrap(err, "error reading 'address'")
		}
		delete(object, "address")
	}

	if raw, found := object["application-id"]; found {
		err = json.Unmarshal(raw, &a.ApplicationId)
		if err != nil {
			return errors.Wrap(err, "error reading 'application-id'")
		}
		delete(object, "application-id")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["endpoint"]; found {
		err = json.Unmarshal(raw, &a.Endpoint)
		if err != nil {
			return errors.Wrap(err, "error reading 'endpoint'")
		}
		delete(object, "endpoint")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EnterprisesEnterpriseApplication to handle AdditionalProperties
func (a EnterprisesEnterpriseApplication) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["address"], err = json.Marshal(a.Address)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'address'"))
	}

	object["application-id"], err = json.Marshal(a.ApplicationId)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'application-id'"))
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Endpoint != nil {
		object["endpoint"], err = json.Marshal(a.Endpoint)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'endpoint'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EnterprisesEnterpriseSiteDeviceGroup. Returns the specified
// element and whether it was found
func (a EnterprisesEnterpriseSiteDeviceGroup) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EnterprisesEnterpriseSiteDeviceGroup
func (a *EnterprisesEnterpriseSiteDeviceGroup) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EnterprisesEnterpriseSiteDeviceGroup to handle AdditionalProperties
func (a *EnterprisesEnterpriseSiteDeviceGroup) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["device"]; found {
		err = json.Unmarshal(raw, &a.Device)
		if err != nil {
			return errors.Wrap(err, "error reading 'device'")
		}
		delete(object, "device")
	}

	if raw, found := object["device-group-id"]; found {
		err = json.Unmarshal(raw, &a.DeviceGroupId)
		if err != nil {
			return errors.Wrap(err, "error reading 'device-group-id'")
		}
		delete(object, "device-group-id")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["ip-domain"]; found {
		err = json.Unmarshal(raw, &a.IpDomain)
		if err != nil {
			return errors.Wrap(err, "error reading 'ip-domain'")
		}
		delete(object, "ip-domain")
	}

	if raw, found := object["mbr"]; found {
		err = json.Unmarshal(raw, &a.Mbr)
		if err != nil {
			return errors.Wrap(err, "error reading 'mbr'")
		}
		delete(object, "mbr")
	}

	if raw, found := object["traffic-class"]; found {
		err = json.Unmarshal(raw, &a.TrafficClass)
		if err != nil {
			return errors.Wrap(err, "error reading 'traffic-class'")
		}
		delete(object, "traffic-class")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return errors.Wrap(err, "error reading 'type'")
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EnterprisesEnterpriseSiteDeviceGroup to handle AdditionalProperties
func (a EnterprisesEnterpriseSiteDeviceGroup) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.Device != nil {
		object["device"], err = json.Marshal(a.Device)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'device'"))
		}
	}

	object["device-group-id"], err = json.Marshal(a.DeviceGroupId)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'device-group-id'"))
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.IpDomain != nil {
		object["ip-domain"], err = json.Marshal(a.IpDomain)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'ip-domain'"))
		}
	}

	if a.Mbr != nil {
		object["mbr"], err = json.Marshal(a.Mbr)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'mbr'"))
		}
	}

	object["traffic-class"], err = json.Marshal(a.TrafficClass)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'traffic-class'"))
	}

	if a.Type != nil {
		object["type"], err = json.Marshal(a.Type)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'type'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EnterprisesEnterpriseSiteDeviceGroupMbr. Returns the specified
// element and whether it was found
func (a EnterprisesEnterpriseSiteDeviceGroupMbr) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EnterprisesEnterpriseSiteDeviceGroupMbr
func (a *EnterprisesEnterpriseSiteDeviceGroupMbr) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EnterprisesEnterpriseSiteDeviceGroupMbr to handle AdditionalProperties
func (a *EnterprisesEnterpriseSiteDeviceGroupMbr) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["downlink"]; found {
		err = json.Unmarshal(raw, &a.Downlink)
		if err != nil {
			return errors.Wrap(err, "error reading 'downlink'")
		}
		delete(object, "downlink")
	}

	if raw, found := object["uplink"]; found {
		err = json.Unmarshal(raw, &a.Uplink)
		if err != nil {
			return errors.Wrap(err, "error reading 'uplink'")
		}
		delete(object, "uplink")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EnterprisesEnterpriseSiteDeviceGroupMbr to handle AdditionalProperties
func (a EnterprisesEnterpriseSiteDeviceGroupMbr) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["downlink"], err = json.Marshal(a.Downlink)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'downlink'"))
	}

	object["uplink"], err = json.Marshal(a.Uplink)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'uplink'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EnterprisesEnterpriseSiteImsiDefinition. Returns the specified
// element and whether it was found
func (a EnterprisesEnterpriseSiteImsiDefinition) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EnterprisesEnterpriseSiteImsiDefinition
func (a *EnterprisesEnterpriseSiteImsiDefinition) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EnterprisesEnterpriseSiteImsiDefinition to handle AdditionalProperties
func (a *EnterprisesEnterpriseSiteImsiDefinition) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["enterprise"]; found {
		err = json.Unmarshal(raw, &a.Enterprise)
		if err != nil {
			return errors.Wrap(err, "error reading 'enterprise'")
		}
		delete(object, "enterprise")
	}

	if raw, found := object["format"]; found {
		err = json.Unmarshal(raw, &a.Format)
		if err != nil {
			return errors.Wrap(err, "error reading 'format'")
		}
		delete(object, "format")
	}

	if raw, found := object["mcc"]; found {
		err = json.Unmarshal(raw, &a.Mcc)
		if err != nil {
			return errors.Wrap(err, "error reading 'mcc'")
		}
		delete(object, "mcc")
	}

	if raw, found := object["mnc"]; found {
		err = json.Unmarshal(raw, &a.Mnc)
		if err != nil {
			return errors.Wrap(err, "error reading 'mnc'")
		}
		delete(object, "mnc")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EnterprisesEnterpriseSiteImsiDefinition to handle AdditionalProperties
func (a EnterprisesEnterpriseSiteImsiDefinition) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["enterprise"], err = json.Marshal(a.Enterprise)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'enterprise'"))
	}

	object["format"], err = json.Marshal(a.Format)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'format'"))
	}

	object["mcc"], err = json.Marshal(a.Mcc)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'mcc'"))
	}

	object["mnc"], err = json.Marshal(a.Mnc)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'mnc'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EnterprisesEnterpriseSiteIpDomain. Returns the specified
// element and whether it was found
func (a EnterprisesEnterpriseSiteIpDomain) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EnterprisesEnterpriseSiteIpDomain
func (a *EnterprisesEnterpriseSiteIpDomain) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EnterprisesEnterpriseSiteIpDomain to handle AdditionalProperties
func (a *EnterprisesEnterpriseSiteIpDomain) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["admin-status"]; found {
		err = json.Unmarshal(raw, &a.AdminStatus)
		if err != nil {
			return errors.Wrap(err, "error reading 'admin-status'")
		}
		delete(object, "admin-status")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["dnn"]; found {
		err = json.Unmarshal(raw, &a.Dnn)
		if err != nil {
			return errors.Wrap(err, "error reading 'dnn'")
		}
		delete(object, "dnn")
	}

	if raw, found := object["dns-primary"]; found {
		err = json.Unmarshal(raw, &a.DnsPrimary)
		if err != nil {
			return errors.Wrap(err, "error reading 'dns-primary'")
		}
		delete(object, "dns-primary")
	}

	if raw, found := object["dns-secondary"]; found {
		err = json.Unmarshal(raw, &a.DnsSecondary)
		if err != nil {
			return errors.Wrap(err, "error reading 'dns-secondary'")
		}
		delete(object, "dns-secondary")
	}

	if raw, found := object["ip-domain-id"]; found {
		err = json.Unmarshal(raw, &a.IpDomainId)
		if err != nil {
			return errors.Wrap(err, "error reading 'ip-domain-id'")
		}
		delete(object, "ip-domain-id")
	}

	if raw, found := object["mtu"]; found {
		err = json.Unmarshal(raw, &a.Mtu)
		if err != nil {
			return errors.Wrap(err, "error reading 'mtu'")
		}
		delete(object, "mtu")
	}

	if raw, found := object["subnet"]; found {
		err = json.Unmarshal(raw, &a.Subnet)
		if err != nil {
			return errors.Wrap(err, "error reading 'subnet'")
		}
		delete(object, "subnet")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EnterprisesEnterpriseSiteIpDomain to handle AdditionalProperties
func (a EnterprisesEnterpriseSiteIpDomain) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AdminStatus != nil {
		object["admin-status"], err = json.Marshal(a.AdminStatus)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'admin-status'"))
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	object["dnn"], err = json.Marshal(a.Dnn)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'dnn'"))
	}

	if a.DnsPrimary != nil {
		object["dns-primary"], err = json.Marshal(a.DnsPrimary)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'dns-primary'"))
		}
	}

	if a.DnsSecondary != nil {
		object["dns-secondary"], err = json.Marshal(a.DnsSecondary)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'dns-secondary'"))
		}
	}

	object["ip-domain-id"], err = json.Marshal(a.IpDomainId)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'ip-domain-id'"))
	}

	if a.Mtu != nil {
		object["mtu"], err = json.Marshal(a.Mtu)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'mtu'"))
		}
	}

	object["subnet"], err = json.Marshal(a.Subnet)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'subnet'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EnterprisesEnterpriseSiteSlice. Returns the specified
// element and whether it was found
func (a EnterprisesEnterpriseSiteSlice) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EnterprisesEnterpriseSiteSlice
func (a *EnterprisesEnterpriseSiteSlice) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EnterprisesEnterpriseSiteSlice to handle AdditionalProperties
func (a *EnterprisesEnterpriseSiteSlice) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["default-behavior"]; found {
		err = json.Unmarshal(raw, &a.DefaultBehavior)
		if err != nil {
			return errors.Wrap(err, "error reading 'default-behavior'")
		}
		delete(object, "default-behavior")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["device-group"]; found {
		err = json.Unmarshal(raw, &a.DeviceGroup)
		if err != nil {
			return errors.Wrap(err, "error reading 'device-group'")
		}
		delete(object, "device-group")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["filter"]; found {
		err = json.Unmarshal(raw, &a.Filter)
		if err != nil {
			return errors.Wrap(err, "error reading 'filter'")
		}
		delete(object, "filter")
	}

	if raw, found := object["mbr"]; found {
		err = json.Unmarshal(raw, &a.Mbr)
		if err != nil {
			return errors.Wrap(err, "error reading 'mbr'")
		}
		delete(object, "mbr")
	}

	if raw, found := object["priority-traffic-rule"]; found {
		err = json.Unmarshal(raw, &a.PriorityTrafficRule)
		if err != nil {
			return errors.Wrap(err, "error reading 'priority-traffic-rule'")
		}
		delete(object, "priority-traffic-rule")
	}

	if raw, found := object["sd"]; found {
		err = json.Unmarshal(raw, &a.Sd)
		if err != nil {
			return errors.Wrap(err, "error reading 'sd'")
		}
		delete(object, "sd")
	}

	if raw, found := object["slice-id"]; found {
		err = json.Unmarshal(raw, &a.SliceId)
		if err != nil {
			return errors.Wrap(err, "error reading 'slice-id'")
		}
		delete(object, "slice-id")
	}

	if raw, found := object["sst"]; found {
		err = json.Unmarshal(raw, &a.Sst)
		if err != nil {
			return errors.Wrap(err, "error reading 'sst'")
		}
		delete(object, "sst")
	}

	if raw, found := object["upf"]; found {
		err = json.Unmarshal(raw, &a.Upf)
		if err != nil {
			return errors.Wrap(err, "error reading 'upf'")
		}
		delete(object, "upf")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EnterprisesEnterpriseSiteSlice to handle AdditionalProperties
func (a EnterprisesEnterpriseSiteSlice) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["default-behavior"], err = json.Marshal(a.DefaultBehavior)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'default-behavior'"))
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DeviceGroup != nil {
		object["device-group"], err = json.Marshal(a.DeviceGroup)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'device-group'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Filter != nil {
		object["filter"], err = json.Marshal(a.Filter)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'filter'"))
		}
	}

	if a.Mbr != nil {
		object["mbr"], err = json.Marshal(a.Mbr)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'mbr'"))
		}
	}

	if a.PriorityTrafficRule != nil {
		object["priority-traffic-rule"], err = json.Marshal(a.PriorityTrafficRule)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'priority-traffic-rule'"))
		}
	}

	object["sd"], err = json.Marshal(a.Sd)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'sd'"))
	}

	object["slice-id"], err = json.Marshal(a.SliceId)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'slice-id'"))
	}

	object["sst"], err = json.Marshal(a.Sst)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'sst'"))
	}

	if a.Upf != nil {
		object["upf"], err = json.Marshal(a.Upf)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'upf'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EnterprisesEnterpriseSiteSlicePriorityTrafficRule. Returns the specified
// element and whether it was found
func (a EnterprisesEnterpriseSiteSlicePriorityTrafficRule) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EnterprisesEnterpriseSiteSlicePriorityTrafficRule
func (a *EnterprisesEnterpriseSiteSlicePriorityTrafficRule) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EnterprisesEnterpriseSiteSlicePriorityTrafficRule to handle AdditionalProperties
func (a *EnterprisesEnterpriseSiteSlicePriorityTrafficRule) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["application"]; found {
		err = json.Unmarshal(raw, &a.Application)
		if err != nil {
			return errors.Wrap(err, "error reading 'application'")
		}
		delete(object, "application")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["device"]; found {
		err = json.Unmarshal(raw, &a.Device)
		if err != nil {
			return errors.Wrap(err, "error reading 'device'")
		}
		delete(object, "device")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["endpoint"]; found {
		err = json.Unmarshal(raw, &a.Endpoint)
		if err != nil {
			return errors.Wrap(err, "error reading 'endpoint'")
		}
		delete(object, "endpoint")
	}

	if raw, found := object["gbr"]; found {
		err = json.Unmarshal(raw, &a.Gbr)
		if err != nil {
			return errors.Wrap(err, "error reading 'gbr'")
		}
		delete(object, "gbr")
	}

	if raw, found := object["mbr"]; found {
		err = json.Unmarshal(raw, &a.Mbr)
		if err != nil {
			return errors.Wrap(err, "error reading 'mbr'")
		}
		delete(object, "mbr")
	}

	if raw, found := object["priority-traffic-rule-id"]; found {
		err = json.Unmarshal(raw, &a.PriorityTrafficRuleId)
		if err != nil {
			return errors.Wrap(err, "error reading 'priority-traffic-rule-id'")
		}
		delete(object, "priority-traffic-rule-id")
	}

	if raw, found := object["traffic-class"]; found {
		err = json.Unmarshal(raw, &a.TrafficClass)
		if err != nil {
			return errors.Wrap(err, "error reading 'traffic-class'")
		}
		delete(object, "traffic-class")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EnterprisesEnterpriseSiteSlicePriorityTrafficRule to handle AdditionalProperties
func (a EnterprisesEnterpriseSiteSlicePriorityTrafficRule) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["application"], err = json.Marshal(a.Application)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'application'"))
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	object["device"], err = json.Marshal(a.Device)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'device'"))
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	object["endpoint"], err = json.Marshal(a.Endpoint)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'endpoint'"))
	}

	if a.Gbr != nil {
		object["gbr"], err = json.Marshal(a.Gbr)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'gbr'"))
		}
	}

	if a.Mbr != nil {
		object["mbr"], err = json.Marshal(a.Mbr)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'mbr'"))
		}
	}

	object["priority-traffic-rule-id"], err = json.Marshal(a.PriorityTrafficRuleId)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'priority-traffic-rule-id'"))
	}

	if a.TrafficClass != nil {
		object["traffic-class"], err = json.Marshal(a.TrafficClass)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'traffic-class'"))
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EnterprisesEnterpriseSiteSmallCell. Returns the specified
// element and whether it was found
func (a EnterprisesEnterpriseSiteSmallCell) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EnterprisesEnterpriseSiteSmallCell
func (a *EnterprisesEnterpriseSiteSmallCell) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EnterprisesEnterpriseSiteSmallCell to handle AdditionalProperties
func (a *EnterprisesEnterpriseSiteSmallCell) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["address"]; found {
		err = json.Unmarshal(raw, &a.Address)
		if err != nil {
			return errors.Wrap(err, "error reading 'address'")
		}
		delete(object, "address")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["enable"]; found {
		err = json.Unmarshal(raw, &a.Enable)
		if err != nil {
			return errors.Wrap(err, "error reading 'enable'")
		}
		delete(object, "enable")
	}

	if raw, found := object["position"]; found {
		err = json.Unmarshal(raw, &a.Position)
		if err != nil {
			return errors.Wrap(err, "error reading 'position'")
		}
		delete(object, "position")
	}

	if raw, found := object["small-cell-id"]; found {
		err = json.Unmarshal(raw, &a.SmallCellId)
		if err != nil {
			return errors.Wrap(err, "error reading 'small-cell-id'")
		}
		delete(object, "small-cell-id")
	}

	if raw, found := object["tac"]; found {
		err = json.Unmarshal(raw, &a.Tac)
		if err != nil {
			return errors.Wrap(err, "error reading 'tac'")
		}
		delete(object, "tac")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EnterprisesEnterpriseSiteSmallCell to handle AdditionalProperties
func (a EnterprisesEnterpriseSiteSmallCell) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Address != nil {
		object["address"], err = json.Marshal(a.Address)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'address'"))
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Enable != nil {
		object["enable"], err = json.Marshal(a.Enable)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'enable'"))
		}
	}

	if a.Position != nil {
		object["position"], err = json.Marshal(a.Position)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'position'"))
		}
	}

	object["small-cell-id"], err = json.Marshal(a.SmallCellId)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'small-cell-id'"))
	}

	object["tac"], err = json.Marshal(a.Tac)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'tac'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EnterprisesEnterpriseSiteUpf. Returns the specified
// element and whether it was found
func (a EnterprisesEnterpriseSiteUpf) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EnterprisesEnterpriseSiteUpf
func (a *EnterprisesEnterpriseSiteUpf) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EnterprisesEnterpriseSiteUpf to handle AdditionalProperties
func (a *EnterprisesEnterpriseSiteUpf) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["address"]; found {
		err = json.Unmarshal(raw, &a.Address)
		if err != nil {
			return errors.Wrap(err, "error reading 'address'")
		}
		delete(object, "address")
	}

	if raw, found := object["config-endpoint"]; found {
		err = json.Unmarshal(raw, &a.ConfigEndpoint)
		if err != nil {
			return errors.Wrap(err, "error reading 'config-endpoint'")
		}
		delete(object, "config-endpoint")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["port"]; found {
		err = json.Unmarshal(raw, &a.Port)
		if err != nil {
			return errors.Wrap(err, "error reading 'port'")
		}
		delete(object, "port")
	}

	if raw, found := object["upf-id"]; found {
		err = json.Unmarshal(raw, &a.UpfId)
		if err != nil {
			return errors.Wrap(err, "error reading 'upf-id'")
		}
		delete(object, "upf-id")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EnterprisesEnterpriseSiteUpf to handle AdditionalProperties
func (a EnterprisesEnterpriseSiteUpf) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["address"], err = json.Marshal(a.Address)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'address'"))
	}

	if a.ConfigEndpoint != nil {
		object["config-endpoint"], err = json.Marshal(a.ConfigEndpoint)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'config-endpoint'"))
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	object["port"], err = json.Marshal(a.Port)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'port'"))
	}

	object["upf-id"], err = json.Marshal(a.UpfId)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'upf-id'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EnterprisesEnterpriseTemplate. Returns the specified
// element and whether it was found
func (a EnterprisesEnterpriseTemplate) Get(fieldName string) (value AdditionalPropertyUnchanged, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EnterprisesEnterpriseTemplate
func (a *EnterprisesEnterpriseTemplate) Set(fieldName string, value AdditionalPropertyUnchanged) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EnterprisesEnterpriseTemplate to handle AdditionalProperties
func (a *EnterprisesEnterpriseTemplate) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["default-behavior"]; found {
		err = json.Unmarshal(raw, &a.DefaultBehavior)
		if err != nil {
			return errors.Wrap(err, "error reading 'default-behavior'")
		}
		delete(object, "default-behavior")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return errors.Wrap(err, "error reading 'description'")
		}
		delete(object, "description")
	}

	if raw, found := object["display-name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return errors.Wrap(err, "error reading 'display-name'")
		}
		delete(object, "display-name")
	}

	if raw, found := object["mbr"]; found {
		err = json.Unmarshal(raw, &a.Mbr)
		if err != nil {
			return errors.Wrap(err, "error reading 'mbr'")
		}
		delete(object, "mbr")
	}

	if raw, found := object["sd"]; found {
		err = json.Unmarshal(raw, &a.Sd)
		if err != nil {
			return errors.Wrap(err, "error reading 'sd'")
		}
		delete(object, "sd")
	}

	if raw, found := object["sst"]; found {
		err = json.Unmarshal(raw, &a.Sst)
		if err != nil {
			return errors.Wrap(err, "error reading 'sst'")
		}
		delete(object, "sst")
	}

	if raw, found := object["template-id"]; found {
		err = json.Unmarshal(raw, &a.TemplateId)
		if err != nil {
			return errors.Wrap(err, "error reading 'template-id'")
		}
		delete(object, "template-id")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AdditionalPropertyUnchanged)
		for fieldName, fieldBuf := range object {
			var fieldVal AdditionalPropertyUnchanged
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EnterprisesEnterpriseTemplate to handle AdditionalProperties
func (a EnterprisesEnterpriseTemplate) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["default-behavior"], err = json.Marshal(a.DefaultBehavior)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'default-behavior'"))
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'description'"))
		}
	}

	if a.DisplayName != nil {
		object["display-name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'display-name'"))
		}
	}

	if a.Mbr != nil {
		object["mbr"], err = json.Marshal(a.Mbr)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'mbr'"))
		}
	}

	if a.Sd != nil {
		object["sd"], err = json.Marshal(a.Sd)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'sd'"))
		}
	}

	if a.Sst != nil {
		object["sst"], err = json.Marshal(a.Sst)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'sst'"))
		}
	}

	object["template-id"], err = json.Marshal(a.TemplateId)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'template-id'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
