// Code generated by oapi-codegen. DO NOT EDIT.
// Package collector provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package collector

import (
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// GET /config
	// (GET /config)
	GetAetherConfiguration(ctx echo.Context) error
	// DELETE /applications/application
	// (DELETE /config/applications/{application-id})
	DeleteApplicationsApplication(ctx echo.Context, applicationId string) error
	// GET /applications/application
	// (GET /config/applications/{application-id})
	GetApplicationsApplication(ctx echo.Context, applicationId string) error
	// POST /applications/application
	// (POST /config/applications/{application-id})
	PostApplicationsApplication(ctx echo.Context, applicationId string) error
	// DELETE /sites/site
	// (DELETE /config/sites/{site-id})
	DeleteSitesSite(ctx echo.Context, siteId string) error
	// GET /sites/site
	// (GET /config/sites/{site-id})
	GetSitesSite(ctx echo.Context, siteId string) error
	// POST /sites/site
	// (POST /config/sites/{site-id})
	PostSitesSite(ctx echo.Context, siteId string) error
	// DELETE /sites/site/device-groups/device-group
	// (DELETE /config/sites/{site-id}/device-groups/{device-group-id})
	DeleteSitesSiteDeviceGroupsDeviceGroup(ctx echo.Context, siteId string, deviceGroupId string) error
	// GET /sites/site/device-groups/device-group
	// (GET /config/sites/{site-id}/device-groups/{device-group-id})
	GetSitesSiteDeviceGroupsDeviceGroup(ctx echo.Context, siteId string, deviceGroupId string) error
	// POST /sites/site/device-groups/device-group
	// (POST /config/sites/{site-id}/device-groups/{device-group-id})
	PostSitesSiteDeviceGroupsDeviceGroup(ctx echo.Context, siteId string, deviceGroupId string) error
	// DELETE /sites/site/device-groups/device-group/devices/device
	// (DELETE /config/sites/{site-id}/device-groups/{device-group-id}/devices/{dev-id})
	DeleteSitesSiteDeviceGroupsDeviceGroupDevicesDevice(ctx echo.Context, siteId string, deviceGroupId string, devId string) error
	// GET /sites/site/device-groups/device-group/devices/device
	// (GET /config/sites/{site-id}/device-groups/{device-group-id}/devices/{dev-id})
	GetSitesSiteDeviceGroupsDeviceGroupDevicesDevice(ctx echo.Context, siteId string, deviceGroupId string, devId string) error
	// POST /sites/site/device-groups/device-group/devices/device
	// (POST /config/sites/{site-id}/device-groups/{device-group-id}/devices/{dev-id})
	PostSitesSiteDeviceGroupsDeviceGroupDevicesDevice(ctx echo.Context, siteId string, deviceGroupId string, devId string) error
	// DELETE /sites/site/devices/device
	// (DELETE /config/sites/{site-id}/devices/{serial-number})
	DeleteSitesSiteDevicesDevice(ctx echo.Context, siteId string, serialNumber string) error
	// GET /sites/site/devices/device
	// (GET /config/sites/{site-id}/devices/{serial-number})
	GetSitesSiteDevicesDevice(ctx echo.Context, siteId string, serialNumber string) error
	// POST /sites/site/devices/device
	// (POST /config/sites/{site-id}/devices/{serial-number})
	PostSitesSiteDevicesDevice(ctx echo.Context, siteId string, serialNumber string) error
	// DELETE /sites/site/sims/sim
	// (DELETE /config/sites/{site-id}/sims/{iccid})
	DeleteSitesSiteSimsSim(ctx echo.Context, siteId string, iccid string) error
	// GET /sites/site/sims/sim
	// (GET /config/sites/{site-id}/sims/{iccid})
	GetSitesSiteSimsSim(ctx echo.Context, siteId string, iccid string) error
	// POST /sites/site/sims/sim
	// (POST /config/sites/{site-id}/sims/{iccid})
	PostSitesSiteSimsSim(ctx echo.Context, siteId string, iccid string) error
	// DELETE /sites/site/slices/slice
	// (DELETE /config/sites/{site-id}/slices/{slice-id})
	DeleteSitesSiteSlicesSlice(ctx echo.Context, siteId string, sliceId string) error
	// GET /sites/site/slices/slice
	// (GET /config/sites/{site-id}/slices/{slice-id})
	GetSitesSiteSlicesSlice(ctx echo.Context, siteId string, sliceId string) error
	// POST /sites/site/slices/slice
	// (POST /config/sites/{site-id}/slices/{slice-id})
	PostSitesSiteSlicesSlice(ctx echo.Context, siteId string, sliceId string) error
	// DELETE /sites/site/slices/slice/applications/application
	// (DELETE /config/sites/{site-id}/slices/{slice-id}/applications/{app-id})
	DeleteSitesSiteSlicesSliceApplicationsApplication(ctx echo.Context, siteId string, sliceId string, appId string) error
	// GET /sites/site/slices/slice/applications/application
	// (GET /config/sites/{site-id}/slices/{slice-id}/applications/{app-id})
	GetSitesSiteSlicesSliceApplicationsApplication(ctx echo.Context, siteId string, sliceId string, appId string) error
	// POST /sites/site/slices/slice/applications/application
	// (POST /config/sites/{site-id}/slices/{slice-id}/applications/{app-id})
	PostSitesSiteSlicesSliceApplicationsApplication(ctx echo.Context, siteId string, sliceId string, appId string) error
	// DELETE /sites/site/slices/slice/device-groups/device-group
	// (DELETE /config/sites/{site-id}/slices/{slice-id}/device-groups/{dg-id})
	DeleteSitesSiteSlicesSliceDeviceGroupsDeviceGroup(ctx echo.Context, siteId string, sliceId string, dgId string) error
	// GET /sites/site/slices/slice/device-groups/device-group
	// (GET /config/sites/{site-id}/slices/{slice-id}/device-groups/{dg-id})
	GetSitesSiteSlicesSliceDeviceGroupsDeviceGroup(ctx echo.Context, siteId string, sliceId string, dgId string) error
	// POST /sites/site/slices/slice/device-groups/device-group
	// (POST /config/sites/{site-id}/slices/{slice-id}/device-groups/{dg-id})
	PostSitesSiteSlicesSliceDeviceGroupsDeviceGroup(ctx echo.Context, siteId string, sliceId string, dgId string) error
	// DELETE /sites/site/small-cells/small-cell
	// (DELETE /config/sites/{site-id}/small-cells/{small-cell-id})
	DeleteSitesSiteSmallCellsSmallCell(ctx echo.Context, siteId string, smallCellId string) error
	// GET /sites/site/small-cells/small-cell
	// (GET /config/sites/{site-id}/small-cells/{small-cell-id})
	GetSitesSiteSmallCellsSmallCell(ctx echo.Context, siteId string, smallCellId string) error
	// POST /sites/site/small-cells/small-cell
	// (POST /config/sites/{site-id}/small-cells/{small-cell-id})
	PostSitesSiteSmallCellsSmallCell(ctx echo.Context, siteId string, smallCellId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAetherConfiguration converts echo context to params.
func (w *ServerInterfaceWrapper) GetAetherConfiguration(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAetherConfiguration(ctx)
	return err
}

// DeleteApplicationsApplication converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApplicationsApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId string

	applicationId = ctx.Param("application-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteApplicationsApplication(ctx, applicationId)
	return err
}

// GetApplicationsApplication converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationsApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId string

	applicationId = ctx.Param("application-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationsApplication(ctx, applicationId)
	return err
}

// PostApplicationsApplication converts echo context to params.
func (w *ServerInterfaceWrapper) PostApplicationsApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId string

	applicationId = ctx.Param("application-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostApplicationsApplication(ctx, applicationId)
	return err
}

// DeleteSitesSite converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSitesSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSitesSite(ctx, siteId)
	return err
}

// GetSitesSite converts echo context to params.
func (w *ServerInterfaceWrapper) GetSitesSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSitesSite(ctx, siteId)
	return err
}

// PostSitesSite converts echo context to params.
func (w *ServerInterfaceWrapper) PostSitesSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSitesSite(ctx, siteId)
	return err
}

// DeleteSitesSiteDeviceGroupsDeviceGroup converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSitesSiteDeviceGroupsDeviceGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "device-group-id" -------------
	var deviceGroupId string

	deviceGroupId = ctx.Param("device-group-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSitesSiteDeviceGroupsDeviceGroup(ctx, siteId, deviceGroupId)
	return err
}

// GetSitesSiteDeviceGroupsDeviceGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetSitesSiteDeviceGroupsDeviceGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "device-group-id" -------------
	var deviceGroupId string

	deviceGroupId = ctx.Param("device-group-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSitesSiteDeviceGroupsDeviceGroup(ctx, siteId, deviceGroupId)
	return err
}

// PostSitesSiteDeviceGroupsDeviceGroup converts echo context to params.
func (w *ServerInterfaceWrapper) PostSitesSiteDeviceGroupsDeviceGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "device-group-id" -------------
	var deviceGroupId string

	deviceGroupId = ctx.Param("device-group-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSitesSiteDeviceGroupsDeviceGroup(ctx, siteId, deviceGroupId)
	return err
}

// DeleteSitesSiteDeviceGroupsDeviceGroupDevicesDevice converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSitesSiteDeviceGroupsDeviceGroupDevicesDevice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "device-group-id" -------------
	var deviceGroupId string

	deviceGroupId = ctx.Param("device-group-id")

	// ------------- Path parameter "dev-id" -------------
	var devId string

	devId = ctx.Param("dev-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSitesSiteDeviceGroupsDeviceGroupDevicesDevice(ctx, siteId, deviceGroupId, devId)
	return err
}

// GetSitesSiteDeviceGroupsDeviceGroupDevicesDevice converts echo context to params.
func (w *ServerInterfaceWrapper) GetSitesSiteDeviceGroupsDeviceGroupDevicesDevice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "device-group-id" -------------
	var deviceGroupId string

	deviceGroupId = ctx.Param("device-group-id")

	// ------------- Path parameter "dev-id" -------------
	var devId string

	devId = ctx.Param("dev-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSitesSiteDeviceGroupsDeviceGroupDevicesDevice(ctx, siteId, deviceGroupId, devId)
	return err
}

// PostSitesSiteDeviceGroupsDeviceGroupDevicesDevice converts echo context to params.
func (w *ServerInterfaceWrapper) PostSitesSiteDeviceGroupsDeviceGroupDevicesDevice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "device-group-id" -------------
	var deviceGroupId string

	deviceGroupId = ctx.Param("device-group-id")

	// ------------- Path parameter "dev-id" -------------
	var devId string

	devId = ctx.Param("dev-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSitesSiteDeviceGroupsDeviceGroupDevicesDevice(ctx, siteId, deviceGroupId, devId)
	return err
}

// DeleteSitesSiteDevicesDevice converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSitesSiteDevicesDevice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "serial-number" -------------
	var serialNumber string

	serialNumber = ctx.Param("serial-number")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSitesSiteDevicesDevice(ctx, siteId, serialNumber)
	return err
}

// GetSitesSiteDevicesDevice converts echo context to params.
func (w *ServerInterfaceWrapper) GetSitesSiteDevicesDevice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "serial-number" -------------
	var serialNumber string

	serialNumber = ctx.Param("serial-number")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSitesSiteDevicesDevice(ctx, siteId, serialNumber)
	return err
}

// PostSitesSiteDevicesDevice converts echo context to params.
func (w *ServerInterfaceWrapper) PostSitesSiteDevicesDevice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "serial-number" -------------
	var serialNumber string

	serialNumber = ctx.Param("serial-number")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSitesSiteDevicesDevice(ctx, siteId, serialNumber)
	return err
}

// DeleteSitesSiteSimsSim converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSitesSiteSimsSim(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "iccid" -------------
	var iccid string

	iccid = ctx.Param("iccid")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSitesSiteSimsSim(ctx, siteId, iccid)
	return err
}

// GetSitesSiteSimsSim converts echo context to params.
func (w *ServerInterfaceWrapper) GetSitesSiteSimsSim(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "iccid" -------------
	var iccid string

	iccid = ctx.Param("iccid")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSitesSiteSimsSim(ctx, siteId, iccid)
	return err
}

// PostSitesSiteSimsSim converts echo context to params.
func (w *ServerInterfaceWrapper) PostSitesSiteSimsSim(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "iccid" -------------
	var iccid string

	iccid = ctx.Param("iccid")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSitesSiteSimsSim(ctx, siteId, iccid)
	return err
}

// DeleteSitesSiteSlicesSlice converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSitesSiteSlicesSlice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "slice-id" -------------
	var sliceId string

	sliceId = ctx.Param("slice-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSitesSiteSlicesSlice(ctx, siteId, sliceId)
	return err
}

// GetSitesSiteSlicesSlice converts echo context to params.
func (w *ServerInterfaceWrapper) GetSitesSiteSlicesSlice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "slice-id" -------------
	var sliceId string

	sliceId = ctx.Param("slice-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSitesSiteSlicesSlice(ctx, siteId, sliceId)
	return err
}

// PostSitesSiteSlicesSlice converts echo context to params.
func (w *ServerInterfaceWrapper) PostSitesSiteSlicesSlice(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "slice-id" -------------
	var sliceId string

	sliceId = ctx.Param("slice-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSitesSiteSlicesSlice(ctx, siteId, sliceId)
	return err
}

// DeleteSitesSiteSlicesSliceApplicationsApplication converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSitesSiteSlicesSliceApplicationsApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "slice-id" -------------
	var sliceId string

	sliceId = ctx.Param("slice-id")

	// ------------- Path parameter "app-id" -------------
	var appId string

	appId = ctx.Param("app-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSitesSiteSlicesSliceApplicationsApplication(ctx, siteId, sliceId, appId)
	return err
}

// GetSitesSiteSlicesSliceApplicationsApplication converts echo context to params.
func (w *ServerInterfaceWrapper) GetSitesSiteSlicesSliceApplicationsApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "slice-id" -------------
	var sliceId string

	sliceId = ctx.Param("slice-id")

	// ------------- Path parameter "app-id" -------------
	var appId string

	appId = ctx.Param("app-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSitesSiteSlicesSliceApplicationsApplication(ctx, siteId, sliceId, appId)
	return err
}

// PostSitesSiteSlicesSliceApplicationsApplication converts echo context to params.
func (w *ServerInterfaceWrapper) PostSitesSiteSlicesSliceApplicationsApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "slice-id" -------------
	var sliceId string

	sliceId = ctx.Param("slice-id")

	// ------------- Path parameter "app-id" -------------
	var appId string

	appId = ctx.Param("app-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSitesSiteSlicesSliceApplicationsApplication(ctx, siteId, sliceId, appId)
	return err
}

// DeleteSitesSiteSlicesSliceDeviceGroupsDeviceGroup converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSitesSiteSlicesSliceDeviceGroupsDeviceGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "slice-id" -------------
	var sliceId string

	sliceId = ctx.Param("slice-id")

	// ------------- Path parameter "dg-id" -------------
	var dgId string

	dgId = ctx.Param("dg-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSitesSiteSlicesSliceDeviceGroupsDeviceGroup(ctx, siteId, sliceId, dgId)
	return err
}

// GetSitesSiteSlicesSliceDeviceGroupsDeviceGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetSitesSiteSlicesSliceDeviceGroupsDeviceGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "slice-id" -------------
	var sliceId string

	sliceId = ctx.Param("slice-id")

	// ------------- Path parameter "dg-id" -------------
	var dgId string

	dgId = ctx.Param("dg-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSitesSiteSlicesSliceDeviceGroupsDeviceGroup(ctx, siteId, sliceId, dgId)
	return err
}

// PostSitesSiteSlicesSliceDeviceGroupsDeviceGroup converts echo context to params.
func (w *ServerInterfaceWrapper) PostSitesSiteSlicesSliceDeviceGroupsDeviceGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "slice-id" -------------
	var sliceId string

	sliceId = ctx.Param("slice-id")

	// ------------- Path parameter "dg-id" -------------
	var dgId string

	dgId = ctx.Param("dg-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSitesSiteSlicesSliceDeviceGroupsDeviceGroup(ctx, siteId, sliceId, dgId)
	return err
}

// DeleteSitesSiteSmallCellsSmallCell converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSitesSiteSmallCellsSmallCell(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "small-cell-id" -------------
	var smallCellId string

	smallCellId = ctx.Param("small-cell-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSitesSiteSmallCellsSmallCell(ctx, siteId, smallCellId)
	return err
}

// GetSitesSiteSmallCellsSmallCell converts echo context to params.
func (w *ServerInterfaceWrapper) GetSitesSiteSmallCellsSmallCell(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "small-cell-id" -------------
	var smallCellId string

	smallCellId = ctx.Param("small-cell-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSitesSiteSmallCellsSmallCell(ctx, siteId, smallCellId)
	return err
}

// PostSitesSiteSmallCellsSmallCell converts echo context to params.
func (w *ServerInterfaceWrapper) PostSitesSiteSmallCellsSmallCell(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "site-id" -------------
	var siteId string

	siteId = ctx.Param("site-id")

	// ------------- Path parameter "small-cell-id" -------------
	var smallCellId string

	smallCellId = ctx.Param("small-cell-id")

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSitesSiteSmallCellsSmallCell(ctx, siteId, smallCellId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/config", wrapper.GetAetherConfiguration)
	router.DELETE(baseURL+"/config/applications/:application-id", wrapper.DeleteApplicationsApplication)
	router.GET(baseURL+"/config/applications/:application-id", wrapper.GetApplicationsApplication)
	router.POST(baseURL+"/config/applications/:application-id", wrapper.PostApplicationsApplication)
	router.DELETE(baseURL+"/config/sites/:site-id", wrapper.DeleteSitesSite)
	router.GET(baseURL+"/config/sites/:site-id", wrapper.GetSitesSite)
	router.POST(baseURL+"/config/sites/:site-id", wrapper.PostSitesSite)
	router.DELETE(baseURL+"/config/sites/:site-id/device-groups/:device-group-id", wrapper.DeleteSitesSiteDeviceGroupsDeviceGroup)
	router.GET(baseURL+"/config/sites/:site-id/device-groups/:device-group-id", wrapper.GetSitesSiteDeviceGroupsDeviceGroup)
	router.POST(baseURL+"/config/sites/:site-id/device-groups/:device-group-id", wrapper.PostSitesSiteDeviceGroupsDeviceGroup)
	router.DELETE(baseURL+"/config/sites/:site-id/device-groups/:device-group-id/devices/:dev-id", wrapper.DeleteSitesSiteDeviceGroupsDeviceGroupDevicesDevice)
	router.GET(baseURL+"/config/sites/:site-id/device-groups/:device-group-id/devices/:dev-id", wrapper.GetSitesSiteDeviceGroupsDeviceGroupDevicesDevice)
	router.POST(baseURL+"/config/sites/:site-id/device-groups/:device-group-id/devices/:dev-id", wrapper.PostSitesSiteDeviceGroupsDeviceGroupDevicesDevice)
	router.DELETE(baseURL+"/config/sites/:site-id/devices/:serial-number", wrapper.DeleteSitesSiteDevicesDevice)
	router.GET(baseURL+"/config/sites/:site-id/devices/:serial-number", wrapper.GetSitesSiteDevicesDevice)
	router.POST(baseURL+"/config/sites/:site-id/devices/:serial-number", wrapper.PostSitesSiteDevicesDevice)
	router.DELETE(baseURL+"/config/sites/:site-id/sims/:iccid", wrapper.DeleteSitesSiteSimsSim)
	router.GET(baseURL+"/config/sites/:site-id/sims/:iccid", wrapper.GetSitesSiteSimsSim)
	router.POST(baseURL+"/config/sites/:site-id/sims/:iccid", wrapper.PostSitesSiteSimsSim)
	router.DELETE(baseURL+"/config/sites/:site-id/slices/:slice-id", wrapper.DeleteSitesSiteSlicesSlice)
	router.GET(baseURL+"/config/sites/:site-id/slices/:slice-id", wrapper.GetSitesSiteSlicesSlice)
	router.POST(baseURL+"/config/sites/:site-id/slices/:slice-id", wrapper.PostSitesSiteSlicesSlice)
	router.DELETE(baseURL+"/config/sites/:site-id/slices/:slice-id/applications/:app-id", wrapper.DeleteSitesSiteSlicesSliceApplicationsApplication)
	router.GET(baseURL+"/config/sites/:site-id/slices/:slice-id/applications/:app-id", wrapper.GetSitesSiteSlicesSliceApplicationsApplication)
	router.POST(baseURL+"/config/sites/:site-id/slices/:slice-id/applications/:app-id", wrapper.PostSitesSiteSlicesSliceApplicationsApplication)
	router.DELETE(baseURL+"/config/sites/:site-id/slices/:slice-id/device-groups/:dg-id", wrapper.DeleteSitesSiteSlicesSliceDeviceGroupsDeviceGroup)
	router.GET(baseURL+"/config/sites/:site-id/slices/:slice-id/device-groups/:dg-id", wrapper.GetSitesSiteSlicesSliceDeviceGroupsDeviceGroup)
	router.POST(baseURL+"/config/sites/:site-id/slices/:slice-id/device-groups/:dg-id", wrapper.PostSitesSiteSlicesSliceDeviceGroupsDeviceGroup)
	router.DELETE(baseURL+"/config/sites/:site-id/small-cells/:small-cell-id", wrapper.DeleteSitesSiteSmallCellsSmallCell)
	router.GET(baseURL+"/config/sites/:site-id/small-cells/:small-cell-id", wrapper.GetSitesSiteSmallCellsSmallCell)
	router.POST(baseURL+"/config/sites/:site-id/small-cells/:small-cell-id", wrapper.PostSitesSiteSmallCellsSmallCell)

}
