// Code generated by oapi-codegen. DO NOT EDIT.
// Package collector provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.0 DO NOT EDIT.
package collector

// Defines values for SiteSitePlansOrigin.
const (
	SiteSitePlansOriginORIGINCENTROID SiteSitePlansOrigin = "ORIGIN_CENTROID"

	SiteSitePlansOriginORIGINTOPLEFT SiteSitePlansOrigin = "ORIGIN_TOP_LEFT"
)

// Top level configuration
type AetherModel struct {
	Applications []Application `json:"applications" yaml:"applications"`
	Enterprise   Enterprise    `json:"enterprise" yaml:"enterprise"`

	// a collection of sites
	Sites []Site `json:"sites" yaml:"sites"`
}

// Application defines model for Application.
type Application struct {
	ApplicationId string `json:"application-id" yaml:"application-id"`
	DisplayName   string `json:"display-name" yaml:"display-name"`
}

// Device defines model for Device.
type Device struct {
	DisplayName  string    `json:"display-name" yaml:"display-name"`
	Imei         string    `json:"imei" yaml:"imei"`
	Location     *string   `json:"location,omitempty" yaml:"location,omitempty"`
	Position     *Position `json:"position,omitempty" yaml:"position,omitempty"`
	SerialNumber string    `json:"serial-number" yaml:"serial-number"`
	Sim          *string   `json:"sim,omitempty" yaml:"sim,omitempty"`
	Type         string    `json:"type" yaml:"type"`
}

// DeviceGroup defines model for DeviceGroup.
type DeviceGroup struct {
	DeviceGroupId string    `json:"device-group-id" yaml:"device-group-id"`
	Devices       *[]string `json:"devices,omitempty" yaml:"devices,omitempty"`
	DisplayName   string    `json:"display-name" yaml:"display-name"`
}

// Enterprise defines model for Enterprise.
type Enterprise struct {
	DisplayName  string  `json:"display-name" yaml:"display-name"`
	EnterpriseId string  `json:"enterprise-id" yaml:"enterprise-id"`
	Image        *string `json:"image,omitempty" yaml:"image,omitempty"`
}

// Position defines model for Position.
type Position struct {
	DisplayName *string `json:"display-name,omitempty" yaml:"display-name,omitempty"`
	PositionX   int     `json:"position-x" yaml:"position-x"`
	PositionY   int     `json:"position-y" yaml:"position-y"`
	SitePlan    string  `json:"site-plan" yaml:"site-plan"`
}

// Sim defines model for Sim.
type Sim struct {
	DisplayName *string `json:"display-name,omitempty" yaml:"display-name,omitempty"`
	Iccid       string  `json:"iccid" yaml:"iccid"`
}

// Site defines model for Site.
type Site struct {
	DeviceGroups []DeviceGroup `json:"device-groups" yaml:"device-groups"`
	Devices      []Device      `json:"devices" yaml:"devices"`
	DisplayName  *string       `json:"display-name,omitempty" yaml:"display-name,omitempty"`
	Image        *string       `json:"image,omitempty" yaml:"image,omitempty"`
	Sims         []Sim         `json:"sims" yaml:"sims"`
	SiteId       string        `json:"site-id" yaml:"site-id"`
	SitePlans    *struct {
		Isometric bool `json:"isometric" yaml:"isometric"`

		// Each SitePlan will be expected to have layers corresponding to the 'layer-id's given here. The 'display-name' will be the tag given on the UI. Examples of common layers are 'Walls','Text'
		Layers *[]struct {
			DisplayName *string `json:"display-name,omitempty" yaml:"display-name,omitempty"`
			LayerId     string  `json:"layer-id" yaml:"layer-id"`
		} `json:"layers,omitempty" yaml:"layers,omitempty"`
		Origin       *SiteSitePlansOrigin `json:"origin,omitempty" yaml:"origin,omitempty"`
		SitePlanList *[]SitePlan          `json:"site-plan-list,omitempty" yaml:"site-plan-list,omitempty"`
	} `json:"site-plans,omitempty" yaml:"site-plans,omitempty"`
	Slices     []Slice     `json:"slices" yaml:"slices"`
	SmallCells []SmallCell `json:"small-cells" yaml:"small-cells"`
}

// SiteSitePlansOrigin defines model for Site.SitePlans.Origin.
type SiteSitePlansOrigin string

// SitePlan defines model for SitePlan.
type SitePlan struct {

	// The site plan identifier
	Id string `json:"id" yaml:"id"`

	// some sites will have multiple buildings and multiple floors The X and Y offset will allow plans to be shown alongside each other. The Z Offset will allow plans to be stacked over each other in an isometric view
	Offsets *struct {

		// the x offset from the site origin
		XOffset uint32 `json:"x-offset" yaml:"x-offset"`

		// the y offset from the site origin
		YOffset uint32 `json:"y-offset" yaml:"y-offset"`

		// the z offset from the site origin
		ZOffset uint32 `json:"z-offset" yaml:"z-offset"`
	} `json:"offsets,omitempty" yaml:"offsets,omitempty"`
	SvgFile string `json:"svg-file" yaml:"svg-file"`
}

// Slice defines model for Slice.
type Slice struct {
	Applications *[]string `json:"applications,omitempty" yaml:"applications,omitempty"`
	DeviceGroups *[]string `json:"device-groups,omitempty" yaml:"device-groups,omitempty"`
	DisplayName  string    `json:"display-name" yaml:"display-name"`
	SliceId      string    `json:"slice-id" yaml:"slice-id"`
}

// SmallCell defines model for SmallCell.
type SmallCell struct {
	DisplayName string    `json:"display-name" yaml:"display-name"`
	Position    *Position `json:"position,omitempty" yaml:"position,omitempty"`
	SmallCellId string    `json:"small-cell-id" yaml:"small-cell-id"`
}
